(define (recursive-f n)
  (define (f n)
    (cond ((< n 3) n)
          ((>= n 3) (+ (f (- n 1))
                       (* 2 (f (- n 2)))
                       (* 3 (f (- n 3)))))))
  (f n))

(define (iterative-f n)
  (define (iter m memo)
    (define (f i)
      (cadr (assoc i memo)))
    (if (> m n)
        (f n)
        (iter (+ m 1) (cons (list m (+ (f (- m 1))
                                       (* 2 (f (- m 2)))
                                       (* 3 (f (- m 3)))))
                            memo))))
  (if (< n 3)
      n
      (iter 3 '((0 0) (1 1) (2 2)))))

(define (test n)
  (define (iter i data)
    (if (= i n)
        data
        (iter (+ i 1) (cons (cons (recursive-f i) (iterative-f i))
                            data))))
  (iter 0 '()))
